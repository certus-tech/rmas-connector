<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "RMASConnector.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-RMASConnector-WorkedExample1" lang="en-US">
	<title>Worked Example 1: HR database to Symplectic CSV</title>
	 <section id="sect-RMASConnector-WorkedExample1-Section_1">
		<title>Overview</title>
		 <para>
			Worked example 1 demonstrates how human resource data can be extracted from one data source ready for import into another: in particular, how to extract data from a Human Resources (HR) database ready for loading it into Symplectic. The data involved contains some personal details and also academic details such as department and employment.
		</para>
		 <para>
			Because the source schemas differ, the data must be mapped from one schema to the other in order to ready the data for import.
		</para>

	</section>
	
	 <section id="sect-RMASConnector-WorkedExample1-Section_2">
		<title>User Story</title>
		 <para>
			A project manager wishes to import data from their institution&#39;s HR database to their Symplectic database.
		</para>
		 <para>
			The HR database contains personnel information including details about academic status, such as department, school and whether they teach and/or research. They have been asked to import data from the HR database into the institutionâs Symplectic database. The manager must therefore extract the HR data and deliver it in a form suitable for import into Symplectic.
		</para>
		 <para>
			The manager starts Spoon and opens the HR to Symplectic job. They modify the job parameters to specify the details of their HR database and the location of the output CSV file. They run the job and a CSV is produced, containing the entries from the HR database in a Symplectic format. The CSV file also contains an extra required field detailing whether each user is an academic. The manager imports this file into Symplectic.
		</para>

	</section>
	
	 <section id="sect-RMASConnector-WorkedExample1-Section_3">
		<title>Structure of the Example</title>
		 <para>
			Worked example 1 consists of three PDI components: one job (WorkedExample1) and two transformations (HRDatabaseInput, SymplecticCSVOutput). These are located in the WorkedExample1 subdirectory of the PDI repository.
		</para>
		 <para>
			Worked example 1 may be used in the context of the <emphasis>Spoon</emphasis> graphical front end to PDI, by loading the job and executing it directly. It may also be executed from a command line.
		</para>
		 <section id="sect-RMASConnector-WorkedExample1-Section_3_1">
			<title>Parameters</title>
			 <para>
				The following parameters are defined by the <emphasis>WorkedExample1</emphasis> job and used by the transformations:
			</para>
			 <table id="sect-RMASConnector-WorkedExample1-Section_3_1_table">
				<caption></caption> <thead>
					<tr>
						<td>
							Parameter
						</td>
						 <td>
							Description
						</td>

					</tr>

				</thead>
				 <tbody>
					<tr>
						<td>
							DatabaseClass
						</td>
						 <td>
							The database driver class name.
						</td>

					</tr>
					 <tr>
						<td>
							DatabaseUrl
						</td>
						 <td>
							The URL for the database connection.
						</td>

					</tr>
					 <tr>
						<td>
							DatabaseUsername
						</td>
						 <td>
							The username for accessing the database.
						</td>

					</tr>
					 <tr>
						<td>
							DatabasePassword
						</td>
						 <td>
							The password for accessing the database.
						</td>

					</tr>
					 <tr>
						<td>
							SQLQuery
						</td>
						 <td>
							The query to execute on the database.
						</td>

					</tr>
					 <tr>
						<td>
							output.file
						</td>
						 <td>
							The path to the file which is generated by the process. If the file does not exist, it will be created automatically.
						</td>

					</tr>
					 <tr>
						<td>
							project.dir
						</td>
						 <td>
							The root directory for the project.
						</td>

					</tr>

				</tbody>

			</table>

		</section>
		

	</section>
	
	 <section id="sect-RMASConnector-WorkedExample1-Section_4">
		<title>Running the job from Spoon</title>
		 <para>
			This section describes how to configure and/or run the job from the Spoon visual editor.
		</para>
		 <section id="sect-RMASConnector-WorkedExample1-Section_4_1">
			<title>Job Structure</title>
			 <figure id="sect-RMASConnector-WorkedExample1-Section_4_1_figure_1">
				<title>The worked example 1 job</title>
				 <mediaobject>
					<imageobject condition="web">
						<imagedata align="center" fileref="images/WorkedExample1/ExampleJob.png" format="PNG" scalefit="1" width="444" />
					</imageobject>
					 <textobject>
						<phrase>Worked Example 1 Job</phrase>
					</textobject>

				</mediaobject>

			</figure>
			 <para>
				This job comprises two transformation steps. <emphasis>Read HR database</emphasis> reads in the data from a specified HR database and maps this to a CERIF-based Common Data Model (CDM). The resulting data is then passed to the second step, <emphasis>Output CSV for Symplectic</emphasis>, which maps from CDM to the Symplectic schema and outputs a CSV file ready to be imported into a Symplectic database.
			</para>
			 <para>
				The HR database being used by the job is configured in the job settings. One parameter is used to specify the database configuration; another is used to define the name of the CSV output file.
			</para>

		</section>
		
		 <section id="sect-RMASConnector-WorkedExample1-Section_4_2">
			<title>Read HR database</title>
			 <para>
				Reading the HR database is achieved using a transformation which contains three steps:
			</para>
			 <figure id="sect-RMASConnector-WorkedExample1-Section_4_3_figure_2">
				<title>Read HR database transformation</title>
				 <mediaobject>
					<imageobject condition="web">
						<imagedata align="center" fileref="images/WorkedExample1/ExampleInputTransformation.png" format="PNG" scalefit="1" width="444" />
					</imageobject>
					 <textobject>
						<phrase>Read HR database transformation</phrase>
					</textobject>

				</mediaobject>

			</figure>
			 <para>
				The <emphasis>Query Database</emphasis> step performs a query on the configured HR database using parameters specified in the Worked Example 1 job. The <emphasis>Map to CDM</emphasis> step maps the fields we want to import to Symplectic, removing any others. Finally, the data is made available to the <emphasis>Output CSV for Symplectic</emphasis> transformation.
			</para>

		</section>
		
		 <section id="sect-RMASConnector-WorkedExample1-Section_4_3">
			<title>Output CSV for Symplectic</title>
			 <para>
				The output transformation to create the CSV file with valid Symplectic schema data comprises a number of steps.
			</para>
			 <figure id="sect-RMASConnector-WorkedExample1-Section_4_3_figure_3">
				<title>Get CDM fields</title>
				 <mediaobject>
					<imageobject condition="web">
						<imagedata align="center" fileref="images/WorkedExample1/ExampleOutputTransformationStart.png" format="PNG" scalefit="1" />
					</imageobject>
					 <textobject>
						<phrase>Get CDM fields</phrase>
					</textobject>

				</mediaobject>

			</figure>
			 <para>
				First the transformation reads in the input data output by the <emphasis>Read HR database</emphasis> transformation using the <emphasis>Get CDM fields</emphasis> step.
			</para>
			 <figure id="sect-RMASConnector-WorkedExample1-Section_4_3_figure_4">
				<title>Set Is Academic field</title>
				 <mediaobject>
					<imageobject condition="web">
						<imagedata align="center" fileref="images/WorkedExample1/ExampleOutputTransformationIsAcademic.png" format="PNG" scalefit="1" width="444" />
					</imageobject>
					 <textobject>
						<phrase>Set Is Academic field</phrase>
					</textobject>

				</mediaobject>

			</figure>
			 <para>
				Secondly, a new field <emphasis>Is Academic</emphasis> is created. Its value is determined by the value of the JOB field. If the value of this field is &#34;Research only&#34;, &#34;Teaching only&#34; or &#34;Research and Teaching&#34;, then the new <emphasis>Is Academic</emphasis> field is set to &#34;Y&#34;. If the value is equal to &#34;Not teaching and/or research&#34;, then the value is set to &#34;N&#34;. Any other value for this field is considered an error and so results in a log entry.
			</para>
			 <figure id="sect-RMASConnector-WorkedExample1-Section_4_3_figure_5">
				<title>Write output to CSV</title>
				 <mediaobject>
					<imageobject condition="web">
						<imagedata align="center" fileref="images/WorkedExample1/ExampleOutputTransformationEnd.png" format="PNG" scalefit="1" />
					</imageobject>
					 <textobject>
						<phrase>Write output to CSV</phrase>
					</textobject>

				</mediaobject>

			</figure>
			 <para>
				The <emphasis>Mapping from CDM to CSV Schema</emphasis> step then completes the mapping of the data. This is then output as a CSV file by the final step in the transform.
			</para>

		</section>
		

	</section>
	
	 <section id="sect-RMASConnector-WorkedExample1-Section_5">
		<title>Running the job from the command line</title>
		 <para>
			You can also run the job from the command line, either as the downloaded worked example or after configuring and saving it using Spoon. The following shows how to run the command from both a linux environment and a Windows environment, using the <emphasis>Kitchen</emphasis> tool which is provided with PDI.
		</para>
		 <section id="sect-RMASConnector-WorkedExample1-Section_5_1">
			<title>Running the job from a Linux command line</title>
			 <para>
				Navigate to the RMAS/kettle directory: 
<programlisting>cd RMAS/kettle</programlisting>
			</para>
			 <para>
				Ensure that the kitchen.sh script is executable: 
<programlisting>chmod u+x kitchen.sh</programlisting>
			</para>
			 <para>
				Run the job using the following command. Note that the quote marks around the repository name are optional, but they <emphasis>must</emphasis> be included if the repository name contains whitespace: 
<programlisting>./kitchen.sh -rep=&#34;RMASConnector&#34; -job=WorkedExample1/WorkedExample1</programlisting>
			</para>

		</section>
		
		 <section id="sect-RMASConnector-WorkedExample1-Section_5_2">
			<title>Running the job from a Windows command line</title>
			 <para>
				Navigate to the RMAS/kettle directory: 
<programlisting>cd RMAS\kettle</programlisting>
			</para>
			 <para>
				Run the job using the following command. Note that the quote marks around the repository name are optional, but they <emphasis>must</emphasis> be included if the repository name contains whitespace: 
<programlisting>Kitchen.bat /rep:&#34;RMASConnector&#34; /job:WorkedExample1/WorkedExample1</programlisting>
			</para>

		</section>
		

	</section>
	
	 <section id="sect-RMASConnector-WorkedExample1-Section_6">
		<title>A note on configuring the worked example</title>
		 <para>
			Worked example 1 gets its input by running a select query on a Human Resources database. This can be configured by ensuring that all the database parameters are set at the job level. Default values for these parameters have been entered for the sample database which is provided as part of the example (RMAS/exampledata/WorkedExample1/WorkedExample1.script). When configuring your own database, you will need to ensure that the <emphasis>Map to CDM</emphasis> step in the <emphasis>Read HR Database</emphasis> transformation maps the column names in the database to the appropriate CDM fields.
		</para>
		 <para>
			The output is a single CSV document, which is created at the location specified in the output.file parameter (the default is tmp/Example1CSVOutput.csv). The CSV will contain data which is compliant with the Symplectic schema.
		</para>

	</section>

</chapter>

