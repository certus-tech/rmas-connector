<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "RMASConnector.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-RMASConnector-WorkedExample2" lang="en-US">
	<title>Worked Example 2: Publication details - Symplectic to Converis</title>
	 <section id="sect-RMASConnector-WorkedExample2-Section_1">
		<title>Overview</title>
		 <para>
			Worked example 2 demonstrates how data from a Symplectic CSV export, containing details of publications, can be mapped to CERIF 1.4 XML. The goal might be to integrate with CERIF XML data from other sources, using PDI or some other CERIF-compliant integration tool such as Converis.
		</para>

	</section>
	
	 <section id="sect-RMASConnector-WorkedExample2-Section_2">
		<title>User Story</title>
		 <para>
			A technical manager maintains a Symplectic system populated with details of publications including names and unique identifiers of authors, publication titles, dates of publication, page numbers, etc. The manager also maintains a Converis system for marshalling the university&#39;s research management data, and wishes to import the publication details into it. To import into the Converis system it is necessary to produce a valid CERIF XML representation of their Symplectic data.
		</para>
		 <para>
			Having first exported the required information from Symplectic to a CSV file, the manager starts PDI and opens the Symplectic to Converis job. They ensure that the job is configured to access their Symplectic export file. They then run the job, which generates a CERIF XML file containing the Symplectic data.
		</para>

	</section>
	
	 <section id="sect-RMASConnector-WorkedExample2-Section_3">
		<title>Structure of the Example</title>
		 <para>
			Worked example 2 consists of three PDI components: one job (WorkedExample2.kjb) and two transformations (SymplecticCSVInput.ktr, CERIFXMLOutput.ktr). These are located in the WorkedExample2 subdirectory of the PDI repository.
		</para>
		 <para>
			Worked example 2 may be used in the context of the <emphasis>Spoon</emphasis> graphical front end to PDI, by loading the job and executing it directly. It may also be executed from a command line.
		</para>
		 <section id="sect-RMASConnector-WorkedExample2-Section_3_1">
			<title>Parameters</title>
			 <para>
				The following parameters are defined by the <emphasis>WorkedExample2</emphasis> job and used by the transformations:
			</para>
			 <table id="sect-RMASConnector-WorkedExample2-Section_3_1_table">
				<caption></caption> <thead>
					<tr>
						<td>
							Parameter
						</td>
						 <td>
							Description
						</td>

					</tr>

				</thead>
				 <tbody>
					<tr>
						<td>
							input.file
						</td>
						 <td>
							The path, including the filename, to the Symplectic CSV export which is read by the CSV input transformation.
						</td>

					</tr>
					 <tr>
						<td>
							output.file
						</td>
						 <td>
							The path to the file which is generated by the process. If the file does not exist, it will be created automatically.
						</td>

					</tr>
					 <tr>
						<td>
							project.dir
						</td>
						 <td>
							The root directory of the project.
						</td>

					</tr>

				</tbody>

			</table>

		</section>
		

	</section>
	
	 <section id="sect-RMASConnector-WorkedExample2-Section_4">
		<title>Running the job from Spoon</title>
		 <para>
			This section describes how to configure and/or run the job from the Spoon visual editor. Worked example 2 may be used in the context of <emphasis>Spoon</emphasis> by loading the job and executing it directly. As distributed, it is configured with default parameter values that will allow it to run without modification from a sample Symplectic CSV file.
		</para>
		 <section id="sect-RMASConnector-WorkedExample2-Section_4_1">
			<title>Job Structure</title>
			 <figure id="sect-RMASConnector-WorkedExample2-Section_4_1_figure">
				<title>The worked example 2 job</title>
				 <mediaobject>
					<imageobject condition="web">
						<imagedata align="center" fileref="images/WorkedExample2/WE2_Job.png" format="PNG" scalefit="0" width="444" />
					</imageobject>
					 <textobject>
						<phrase>Worked Example 2 Job</phrase>
					</textobject>

				</mediaobject>

			</figure>
			 <para>
				Worked example 2 consists simply of reading an input file into the CERIF-based Common Data Model (CDM) and serialising to CERIF XML. No intermediate processing is required. There are therefore just two entries in the job: <emphasis>Read Symplectic CSV</emphasis> and <emphasis>Write CERIF XML</emphasis>.
			</para>

		</section>
		
		 <section id="sect-RMASConnector-WorkedExample2-Section_4_2">
			<title>Read Symplectic CSV</title>
			 <para>
				Reading Symplectic CSV is achieved with the following transformation:
			</para>
			 <figure id="sect-RMASConnector-WorkedExample2-Section_4_2_figure">
				<title>The Read Symplectic CSV transformation</title>
				 <mediaobject>
					<imageobject condition="web">
						<imagedata align="center" fileref="images/WorkedExample2/WE2_CSVInput.png" format="PNG" scalefit="0" width="444" />
					</imageobject>
					 <textobject>
						<phrase>The Read Symplectic CSV transformation</phrase>
					</textobject>

				</mediaobject>

			</figure>
			 <para>
				The first step reads from the CSV file, and introduces the configured fields into the transformation. As CSV is intrinsically similar to the way data is handled in transformations - as a series of rows with a defined set of fields (columns) - no special handling is required, and a standard PDI <emphasis>CSV Input</emphasis> step is used. Although all rows and columns in the input data are read by this step, only the field names defined in the CSV Input step are added to the stream.
			</para>
			 <para>
				Next, a JavaScript step is used to convert any dates in a dd/MM/yyyy format into the xs:dateTime format which is required by CERIF (yyyy-MM-dd). Dates with times are also converted into a CERIF-compatible format. These converted dates and dateTimes are added as new fields to each row.
			</para>
			 <para>
				A <emphasis>Map to CDM</emphasis> step then maps from the local fields to CDM fields. In worked example 4 the <emphasis>Map to CDM</emphasis> step is configured to: 
				<itemizedlist>
					<listitem>
						<para>
							Remove the now spurious original date fields loaded from the CSV file. This is configured via the field listing on the <emphasis>Remove</emphasis> tab.
						</para>

					</listitem>
					 <listitem>
						<para>
							Map the remaining fields to <emphasis>CDM Fields</emphasis> via the <emphasis>Meta-data tab</emphasis>.
						</para>

					</listitem>

				</itemizedlist>
			</para>
			 <para>
				The <emphasis>Make rows available</emphasis> step allows the <emphasis>Post CERIF to Web Service</emphasis> transformation to access the data produced by this transformation.
			</para>

		</section>
		
		 <section id="sect-RMASConnector-WorkedExample2-Section_4_3">
			<title>CERIF XML Output</title>
			 <para>
				The content of the CDM is serialised to a valid CERIF 1.4 XML document with the following transformation:
			</para>
			 <figure id="sect-RMASConnector-WorkedExample2-Section_4_3_figure">
				<title>The CERIF XML Output transformation</title>
				 <mediaobject>
					<imageobject condition="web">
						<imagedata align="center" fileref="images/WorkedExample2/WE2_CERIFOutput.png" format="PNG" scalefit="0" width="444" />
					</imageobject>
					 <textobject>
						<phrase>The CERIF XML Output transformation</phrase>
					</textobject>

				</mediaobject>

			</figure>
			 <para>
				The <emphasis>Get CDM Fields</emphasis> step makes the CDM data from the <emphasis>Read Symplectic CSV</emphasis> transformation available to this transformation. The <emphasis>Convert CDM to CERIF</emphasis> step serialises the CDM data to CERIF XML and validates it. This step produces a single row with a single field, containing the entire XML document. The final step in the transform writes the content of this field into a plain text file.
			</para>

		</section>
		

	</section>
	
	 <section id="sect-RMASConnector-WorkedExample2-Section_5">
		<title>Running the job from Spoon</title>
		 <para>
			You can also run the job from the command line, either as the downloaded worked example or after configuring and saving it using Spoon. The following shows how to run the command from both a linux environment and a Windows environment, using the <emphasis>Kitchen</emphasis> tool which is provided with PDI.
		</para>
		 <section id="sect-RMASConnector-WorkedExample2-Section_5_1">
			<title>Running the job from a Linux command line</title>
			 <para>
				Navigate to the RMAS/kettle directory: 
<programlisting>cd RMAS/kettle</programlisting>
			</para>
			 <para>
				Ensure that the kitchen.sh script is executable: 
<programlisting>chmod u+x kitchen.sh</programlisting>
			</para>
			 <para>
				Run the job using the following command. Note that the quote marks around the repository name are optional, but they <emphasis>must</emphasis> be included if the repository name contains whitespace: 
<programlisting>./kitchen.sh -rep=&#34;RMASConnector&#34; -job=WorkedExample2/WorkedExample2</programlisting>
			</para>

		</section>
		
		 <section id="sect-RMASConnector-WorkedExample2-Section_5_2">
			<title>Running the job from a Windows command line</title>
			 <para>
				Navigate to the RMAS/kettle directory: 
<programlisting>cd RMAS\kettle</programlisting>
			</para>
			 <para>
				Run the job using the following command. Note that the quote marks around the repository name are optional, but they <emphasis>must</emphasis> be included if the repository name contains whitespace: 
<programlisting>Kitchen.bat /rep:&#34;RMASConnector&#34; /job:WorkedExample2/WorkedExample2</programlisting>
			</para>

		</section>
		

	</section>
	
	 <section id="sect-RMASConnector-WorkedExample2-Section_6">
		<title>A note on configuring the worked example</title>
		 <para>
			Worked example 2 ingests an export from Symplectic, in the form of a CSV file. For details of the columns which are expected in the CSV, refer to the sample data file at RMAS/exampledata/WorkedExample2/SymplecticCSV.csv.
		</para>
		 <para>
			CSV files with a different schema may be substituted. Doing so requires the following modifications to the input transformation: 
			<itemizedlist>
				<listitem>
					<para>
						Update the field names as appropriate on the CSV Input step - note that the field names defined here do not have to match the column names in the CSV file; in Symplectic exports it is the position of the columns which is important.
					</para>

				</listitem>
				 <listitem>
					<para>
						Update or remove the date reformatting step, as appropriate. If date conversion is required then the input and output formats may be altered by changing the variables at the top of the script. If no reformatting is required, the step may be removed entirely or routed around. 
						<itemizedlist>
							<listitem>
								<para>
									To route around a step, redirect the input hop to target the subsequent step and then disable the output hop from the step.
								</para>

							</listitem>

						</itemizedlist>
					</para>

				</listitem>

			</itemizedlist>
		</para>
		 <para>
			The output from the worked example is a single XML document, which by default is produced at RMAS/output/Example2CERIFOutput.xml. The XML document will contain CERIF 1.4 data which has been validated against the CERIF 1.4 schema.
		</para>

	</section>

</chapter>

